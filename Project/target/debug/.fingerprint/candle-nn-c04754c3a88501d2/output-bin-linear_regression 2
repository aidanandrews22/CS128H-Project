{"$message_type":"diagnostic","message":"cannot multiply `&Result<candle_core::Tensor, candle_core::Error>` by `&Result<candle_core::Tensor, candle_core::Error>`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"src/linear_regression.rs","byte_start":1694,"byte_end":1701,"line_start":45,"line_end":45,"column_start":29,"column_end":36,"is_primary":false,"text":[{"text":"    let numerator_tensor = (&x_diff * &y_diff).sum(&[])? .to_scalar::<f64>()?;","highlight_start":29,"highlight_end":36}],"label":"&Result<candle_core::Tensor, candle_core::Error>","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/linear_regression.rs","byte_start":1704,"byte_end":1711,"line_start":45,"line_end":45,"column_start":39,"column_end":46,"is_primary":false,"text":[{"text":"    let numerator_tensor = (&x_diff * &y_diff).sum(&[])? .to_scalar::<f64>()?;","highlight_start":39,"highlight_end":46}],"label":"&Result<candle_core::Tensor, candle_core::Error>","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/linear_regression.rs","byte_start":1702,"byte_end":1703,"line_start":45,"line_end":45,"column_start":37,"column_end":38,"is_primary":true,"text":[{"text":"    let numerator_tensor = (&x_diff * &y_diff).sum(&[])? .to_scalar::<f64>()?;","highlight_start":37,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m: cannot multiply `&Result<candle_core::Tensor, candle_core::Error>` by `&Result<candle_core::Tensor, candle_core::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/linear_regression.rs:45:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let numerator_tensor = (&x_diff * &y_diff).sum(&[])? .to_scalar::<f64>()?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&Result<candle_core::Tensor, candle_core::Error>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&Result<candle_core::Tensor, candle_core::Error>\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot multiply `&Result<candle_core::Tensor, candle_core::Error>` by `&Result<candle_core::Tensor, candle_core::Error>`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"src/linear_regression.rs","byte_start":1775,"byte_end":1782,"line_start":46,"line_end":46,"column_start":31,"column_end":38,"is_primary":false,"text":[{"text":"    let denominator_tensor = (&x_diff * &x_diff).sum(&[])? .to_scalar::<f64>()?;","highlight_start":31,"highlight_end":38}],"label":"&Result<candle_core::Tensor, candle_core::Error>","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/linear_regression.rs","byte_start":1785,"byte_end":1792,"line_start":46,"line_end":46,"column_start":41,"column_end":48,"is_primary":false,"text":[{"text":"    let denominator_tensor = (&x_diff * &x_diff).sum(&[])? .to_scalar::<f64>()?;","highlight_start":41,"highlight_end":48}],"label":"&Result<candle_core::Tensor, candle_core::Error>","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/linear_regression.rs","byte_start":1783,"byte_end":1784,"line_start":46,"line_end":46,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"    let denominator_tensor = (&x_diff * &x_diff).sum(&[])? .to_scalar::<f64>()?;","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m: cannot multiply `&Result<candle_core::Tensor, candle_core::Error>` by `&Result<candle_core::Tensor, candle_core::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/linear_regression.rs:46:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let denominator_tensor = (&x_diff * &x_diff).sum(&[])? .to_scalar::<f64>()?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&Result<candle_core::Tensor, candle_core::Error>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&Result<candle_core::Tensor, candle_core::Error>\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0369`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0369`.\u001b[0m\n"}
